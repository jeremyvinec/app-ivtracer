import React from 'react'
import { StyleSheet, View, Text, Image, Button, Alert } from 'react-native'
import ThumbnailsList from './ThumbnailsList'
import PushNotification from 'react-native-push-notification';

// Notification
import NotifService from '../notif-service';
import appConfig from '../app/app.json';

// API
import { getThumbnails } from '../../utils/api/Api'

class Thumbnails extends React.Component {
    constructor(props) {
        super(props)
        this.lastId = 0;
        this.state = {
          senderId: appConfig.senderID,
          thumbnails: [],
        };
        this._recoverThumbnails = this._recoverThumbnails.bind(this);
        this.notif = new NotifService(this.onRegister.bind(this), this.onNotif.bind(this));
      }
    
      componentWillMount(){
        this._recoverThumbnails()
        //this.localNotif()
      }

      localNotif() {
        this.lastId++;
        console.log(this.state.thumbnails)
        PushNotification.localNotification({
          /* Android Only Properties */
          id: ''+this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          //ticker: "Alarme haute : 11 UU97533-12008 > 50%", // (optional)
          autoCancel: true, // (optional) default: true
          largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
          smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
          //bigText: 'ok', // (optional) default: "message" prop
          //subText: "This is a subText", // (optional) default: none
          //color: 'red', // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
          tag: 'some_tag', // (optional) add tag to message
          group: "group", // (optional) add group to message
          ongoing: false, // (optional) set whether this is an "ongoing" notification
          
          /* iOS only properties */
          alertAction: 'view', // (optional) default: view
          category: null, // (optional) default: null
          userInfo: null, // (optional) default: null (object containing additional notification data)
    
          /* iOS and Android properties */
          title: "Local stockage", // (optional)
          message: 'ok', // (required)
          playSound: false, // (optional) default: true
          soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
          number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
          //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
        });
      }
    
      _recoverThumbnails() {
        getThumbnails().then(data => {
            //console.log(data.thumbnails)

            // infos des vignettes
            this.setState({
                thumbnails: this.state.thumbnails.concat(data.thumbnails) // ajouter les vignettes à ceux que l'on a déjà récupérés, deux copies de nos tableaux pour que la concaténation fonctionne
              })

            console.log(this.state.thumbnails.findIndex(item => item.id === this.state.thumbnails.id))

            if(this.state.thumbnails.findIndex(item => item.id === this.state.thumbnails.id) !== 1){
              // Si la vignette n'est pas dans le state, on envoie une notification
              console.log(data.thumbnails[0].name)
              PushNotification.localNotification({
                
                /* iOS and Android properties */
                title: "Local stockage", // (optional)
                message: data.thumbnails[0].name, // (required)
                soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
              });
            }

        })
      }

    render(){
        return(
            <View style={styles.container}>
                <Image style={styles.logo} source={require('../../assets/images/logo.png')}/>
                <View style={styles.spacer}/>
                <View>
                    <Text style={styles.text}>{this.state.thumbnails.length} BOUCLES EN ALARMES ET/OU A ACQUITTER</Text>
                </View>
                <View style={styles.spacer}/>
                <View style={styles.thumbnails_list}>
                  <ThumbnailsList
                      thumbnails={this.state.thumbnails}
                      recoverThumbnails={this._recoverThumbnails}
                    />
                </View>
                <Button title='notif' onPress={() => this.notif.localNotif()}/>
          </View>
        )
    }

    onRegister(token) {
      Alert.alert("Registered !", JSON.stringify(token));
      console.log(token);
      this.setState({ registerToken: token.token, gcmRegistered: true });
    }
  
    onNotif(notif) {
      console.log(notif);
      Alert.alert(notif.title, notif.message);
    }
  
    handlePerm(perms) {
      Alert.alert("Permissions", JSON.stringify(perms));
    }
}

const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      backgroundColor: '#4C626F',
    },
    spacer: {
      height: 10,
    },
    logo: {
      marginTop: 50,
      height: 76,
      width: 253,
    },
    text: {
      color: "#fff",
      fontWeight: "bold",
      textAlign: 'center'
    },
    thumbnails_list : {
      height: '65%'
    }
})

export default Thumbnails